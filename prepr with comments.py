import numpy as np
import pandas as pd

"""
1) –≥–æ—Ç–æ–≤–æ: –ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∏ 
2) –≥–æ—Ç–æ–≤–æ: –£–¥–∞–ª—è–µ—Ç –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä—Ä–µ–ª–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏—á–∏
3) –≥–æ—Ç–æ–≤–æ: –°—á–∏—Ç–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –∫–∞–∂–¥–æ–π —á–∏—Å–ª–æ–≤–æ–π —Ñ–∏—á–µ
4) –≥–æ—Ç–æ–≤–æ: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏. –í–∞–∂–Ω–æ: –∏ –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–∏–ø–æ–º
object, –Ω–æ –∏ —á–∏—Å–ª–æ–≤—ã–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –º–µ–Ω–µ–µ 25 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
5) –≥–æ—Ç–æ–≤–æ: –†–∞–∑–±–∏–≤–∞–µ—Ç –∫–æ–ª–æ–Ω–∫—É —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º (create_dttm) –Ω–∞ –≥–æ–¥, –º–µ—Å—è—Ü –∏ –¥–µ–Ω—å
"""

# –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–æ–ª–æ–Ω–∫–µ
# 1. df['col'] ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±
#    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞, –±–µ–∑–æ–ø–∞—Å–µ–Ω
#    - col ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–ª–æ–Ω–∫–∏
#    –ü—Ä–∏–º–µ—Ä:
#        df['age']        # –∫–æ–ª–æ–Ω–∫–∞ 'age'
#        df[col]          # –µ—Å–ª–∏ col = 'age'

# 2. df.columns ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–º—ë–Ω –∫–æ–ª–æ–Ω–æ–∫ (—Ç–∏–ø Index[str])
#    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ü–∏–∫–ª–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä:
#
#        for col in df.columns:
#            print(col)       # –ø–µ—á–∞—Ç–∞–µ—Ç –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ (—Å—Ç—Ä–æ–∫–∞)
#            print(df[col])   # –≤—ã–≤–æ–¥–∏—Ç —Å–∞–º—É –∫–æ–ª–æ–Ω–∫—É (Series)

# –ü–æ—è—Å–Ω–µ–Ω–∏–µ:
# - col ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ 'name'
# - df[col] ‚Äî —Å–∞–º —Å—Ç–æ–ª–±–µ—Ü –¥–∞–Ω–Ω—ã—Ö (—Ç–∏–ø Series) 'Liza Katya Masha'
# - df.col ‚Äî –∫—Ä–∞—Å–∏–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –Ω–æ –º–µ–Ω–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π

# UNIQUE
# –≠—Ç–æ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–æ–ª–æ–Ω–∫–µ:
# df['city'].unique()
# # ‚Üí array(['Moscow', 'Paris', 'London'], dtype=object)
#
# NUNIQUE
# –≠—Ç–æ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:
# df['city'].nunique()
# # ‚Üí 3
# üìå n = number ‚Üí ‚Äúnumber of unique values‚Äù

# df.loc[—Å—Ç—Ä–æ–∫–∞, –∫–æ–ª–æ–Ω–∫–∞]
# df.loc['Alice', 'Age'] ‚Üí –í–æ–∑—å–º—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –∏–º–µ–Ω–µ–º 'Alice' –∏ –∫–æ–ª–æ–Ω–∫–∏ 'Age'
# df.loc['Alice', ['Age', 'City']] ‚Üí –í–æ–∑—å–º—ë—Ç —É Alice –≤–æ–∑—Ä–∞—Å—Ç –∏ –≥–æ—Ä–æ–¥

# 	‚Ä¢	df.loc ‚Äî –ø–æ –∏–º–µ–Ω–∞–º (label-based)
# 	‚Ä¢	df.iloc ‚Äî –ø–æ –Ω–æ–º–µ—Ä–∞–º (integer-based)

# –ò—Å–ø–æ–ª—å–∑—É–µ—à—å
# df.loc[] –ö–æ–≥–¥–∞ –∑–Ω–∞–µ—à—å –∏–º–µ–Ω–∞
# df.iloc[]  –ö–æ–≥–¥–∞ –∑–Ω–∞–µ—à—å –Ω–æ–º–µ—Ä–∞


class Preprocessor:
    def __init__(self, df: pd.DataFrame):
        self.df = df
        # self.num_features –∏ self.cat_features
        # –ª–µ–∂–∞—Ç –∏–º–µ–Ω–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ (—Ç–æ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏),
        # –∞ –Ω–µ —Å–∞–º–∏ –∫–æ–ª–æ–Ω–∫–∏ –∏ –Ω–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö
        self.num_features = [col for col in df.columns if self.df[col].dtype != 'object']
        self.cat_features = [col for col in df.columns if col not in self.num_features]
        # col —ç—Ç–æ –Ω–µ –∫–æ–ª–æ–Ω–∫–∞ –∞ –µ–µ –∏–º—è, df[col] —Å–∞–º–∞ –∫–æ–ª–æ–Ω–∫–∞, df.columns —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–º—ë–Ω –∫–æ–ª–æ–Ω–æ–∫
        self.num_features_less_25 = [col for col in self.num_features if self.df[col].nunique() < 25]
        self.df.columns = self.df.columns.str.strip() # –æ—á–∏—â–∞–µ–º, strip() —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏

    def fill_gaps(self):
        # self.df.columns —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–æ–ª–æ–Ω–æ–∫, –∞ –Ω–µ –∫ —Å–∞–º–∏–º –¥–∞–Ω–Ω—ã–º
        for col in self.df.columns:
            if col in self.cat_features:
                self.df[col] = self.df[col].fillna('Unknown')
            else:
                self.df[col] = self.df[col].fillna(self.df[col].median()) # –ª—É—á—à–µ –Ω–µ –Ω—É–ª–µ–º –∞ –º–µ–¥–∏–∞–Ω–æ–π

    def del_features(self, thresold = 0.8):
        corr_matrix = self.df.corr().abs()
        to_drop = set()
        for i in range(len(corr_matrix.columns)):
            for j in range(i + 1, len(corr_matrix.columns)):
                col1 = corr_matrix.columns[i]
                col2 = corr_matrix.columns[j]
                if corr_matrix.loc[col1, col2] > thresold:
                    if col2 not in to_drop:
                        to_drop.add(col2)
        self.df.drop(columns=to_drop, inplace=True)

    def mean_numerical_features(self):
        return self.df[self.num_features].mean()

    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞—Ç —Ñ–∏—á–∏ —ç—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–∞—Ç —Å—Ç–æ–ª–±—Ü—ã –≤ —á–∏—Å–ª–æ–≤—ã–µ, —á—Ç–æ–±—ã –∏—Ö –ø–æ–Ω–∏–º–∞–ª–∞ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    # –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏–ª–∏ –º—ã –Ω–µ –∑–Ω–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç —Ç–∞—Ä–≥–µ—Ç–æ–º, —Ç–æ:
    # OHE –±–µ–∑–æ–ø–∞—Å–µ–Ω: –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ü–∏—Ñ—Ä—ã (–Ω–æ –¥—É–±–ª–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å)
    # MTE –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å ‚Äî —Ç–∫ —É –Ω–∞—Å –Ω–µ—Ç —Ç–∞—Ä–≥–µ—Ç–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—Ä–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ
    def process_categorical_features(self):
        cols_to_encode = self.num_features_less_25 + self.cat_features
        self.df = pd.get_dummies(self.df, columns=cols_to_encode)


    def split_columns(self):
        try:
            self.df['Date'] = pd.to_datetime(self.df['Date']) # –≤–æ–∑–±–º–∏ –∫–æ–ª–æ–Ω–∫—É –¥–µ–π—Ç –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏ –µ–µ –≤ —Ç–∏–ø –¥–∞—Ç—ã
            self.df['Year'] = self.df['Date'].dt.year # –¥–æ—Å—Ç–∞—ë–º –≥–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É Year
            self.df['Month'] = self.df['Date'].dt.month
            self.df['Day'] = self.df['Date'].dt.day
        except: KeyError('–∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

    def __str__(self):
        return str(self.df)
